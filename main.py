from fastapi import FastAPI, UploadFile, File, Request, HTTPException
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import io
import os
import base64
import anthropic
import json
from typing import List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="AI–¢–æ–≤–∞—Ä.tj", description="–ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

# CORS –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs("static", exist_ok=True)
os.makedirs("uploads", exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

def calculate_api_cost(image_size_bytes: int, response_text: str) -> dict:
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ API –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude"""
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Claude API (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    INPUT_COST_PER_1M_TOKENS = 3.0  # $3 –∑–∞ 1M input —Ç–æ–∫–µ–Ω–æ–≤
    OUTPUT_COST_PER_1M_TOKENS = 15.0  # $15 –∑–∞ 1M output —Ç–æ–∫–µ–Ω–æ–≤
    USD_TO_RUB = 95.0  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
    
    # –†–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    image_size_kb = image_size_bytes / 1024
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç 1000-2000 —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
    image_tokens = max(1000, min(2500, int(image_size_kb * 1.5)))
    
    # –†–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1.3 —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–∏–º–≤–æ–ª –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)
    output_tokens = int(len(response_text) * 1.3)
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    input_cost_usd = (image_tokens / 1_000_000) * INPUT_COST_PER_1M_TOKENS
    output_cost_usd = (output_tokens / 1_000_000) * OUTPUT_COST_PER_1M_TOKENS
    total_cost_usd = input_cost_usd + output_cost_usd
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏
    total_cost_rub = total_cost_usd * USD_TO_RUB
    
    return {
        "image_tokens": image_tokens,
        "output_tokens": output_tokens,
        "input_cost_usd": round(input_cost_usd, 6),
        "output_cost_usd": round(output_cost_usd, 6),
        "total_cost_usd": round(total_cost_usd, 6),
        "total_cost_rub": round(total_cost_rub, 4),
        "usd_to_rub_rate": USD_TO_RUB
    }

def analyze_image_with_claude(image_data: bytes, filename: str) -> tuple[str, dict]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Claude –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ + —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    try:
        logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            logger.error(error_msg)
            cost_info = calculate_api_cost(len(image_data), error_msg)
            return error_msg, cost_info
        
        logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-4:]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        logger.info("üîÑ –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        logger.info(f"‚úÖ Base64 –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        file_extension = filename.lower().split('.')[-1] if '.' in filename else 'jpg'
        mime_type_map = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg', 
            'png': 'image/png',
            'gif': 'image/gif',
            'webp': 'image/webp'
        }
        mime_type = mime_type_map.get(file_extension, 'image/jpeg')
        logger.info(f"üìé MIME —Ç–∏–ø: {mime_type}")
        
        logger.info("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –í CLAUDE API...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2000,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": mime_type,
                                "data": image_base64,
                            },
                        },
                        {
                            "type": "text",
                            "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∞–π–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

üè∑Ô∏è –¢–û–í–ê–† –ò –ö–ê–¢–ï–ì–û–†–ò–Ø:
- –ß—Ç–æ —ç—Ç–æ –∑–∞ —Ç–æ–≤–∞—Ä/–ø—Ä–µ–¥–º–µ—Ç
- –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è (–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ —Ç.–¥.)
- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞

üìù –î–ï–¢–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:
- –ú–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)
- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–æ–≤—ã–π/–±/—É, –≤–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è/–∏–∑–Ω–æ—Å)
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ñ—É–Ω–∫—Ü–∏–∏
- –ë—Ä–µ–Ω–¥ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)
- –ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å (—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç)

üí∞ –î–õ–Ø –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏
- –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
- –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è

–û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä."""
                        }
                    ],
                }
            ],
        )
        
        description = message.content[0].text
        logger.info(f"‚úÖ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ CLAUDE! –î–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_info = calculate_api_cost(len(image_data), description)
        logger.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ‚ÇΩ{cost_info['total_cost_rub']}")
        
        return description, cost_info
        
    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}"
        logger.error(error_msg)
        cost_info = calculate_api_cost(len(image_data), error_msg)
        return error_msg, cost_info

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        return FileResponse('static/index.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head><title>–û—à–∏–±–∫–∞</title></head>
        <body>
            <h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
            <p>–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª static/index.html —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
        </body>
        </html>
        """, status_code=500)

@app.post("/api/analyze-single")
async def analyze_single_image(file: UploadFile = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {file.filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        contents = await file.read()
        logger.info(f"üìÇ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(contents)} –±–∞–π—Ç")
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ PIL)
        width, height = 800, 600
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å Claude
        description, cost_info = analyze_image_with_claude(contents, file.filename)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä
        image_base64 = base64.b64encode(contents).decode('utf-8')
        
        return JSONResponse({
            "success": True,
            "result": {
                "id": f"{file.filename}_{int(io.BytesIO(contents).tell())}",
                "filename": file.filename,
                "width": width,
                "height": height,
                "size_bytes": len(contents),
                "image_preview": f"data:image/{file.filename.split('.')[-1]};base64,{image_base64}",
                "description": description,
                "api_cost": cost_info
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        }, status_code=500)

@app.post("/api/analyze-multiple")
async def analyze_multiple_images(files: List[UploadFile] = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        if len(files) > 10:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑")
        
        results = []
        total_cost_rub = 0
        
        for i, file in enumerate(files):
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i+1}/{len(files)}: {file.filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if not file.content_type.startswith('image/'):
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª {file.filename} - –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                continue
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            contents = await file.read()
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ PIL)
            width, height = 800, 600
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å Claude
            description, cost_info = analyze_image_with_claude(contents, file.filename)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä
            image_base64 = base64.b64encode(contents).decode('utf-8')
            
            total_cost_rub += cost_info['total_cost_rub']
            
            results.append({
                "id": f"{file.filename}_{len(contents)}_{int(len(results))}",
                "filename": file.filename,
                "width": width,
                "height": height,
                "size_bytes": len(contents),
                "image_preview": f"data:image/{file.filename.split('.')[-1]};base64,{image_base64}",
                "description": description,
                "api_cost": cost_info
            })
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        return JSONResponse({
            "success": True,
            "results": results,
            "total_cost_rub": round(total_cost_rub, 4),
            "processed_count": len(files),
            "summary": {
                "total_images": len(files),
                "total_tokens_used": sum(r["api_cost"]["image_tokens"] + r["api_cost"]["output_tokens"] for r in results),
                "average_cost_per_image": round(total_cost_rub / len(files), 4) if files else 0
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        }, status_code=500)

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    api_key = os.getenv("ANTHROPIC_API_KEY")
    return JSONResponse({
        "status": "healthy",
        "api_key_configured": bool(api_key),
        "api_key_preview": f"{api_key[:10]}...{api_key[-4:]}" if api_key else None,
        "message": "üöÄ AI–¢–æ–≤–∞—Ä.tj API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    })

@app.get("/api/test")
async def test_endpoint():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return JSONResponse({
        "message": "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": "2025-06-14",
        "service": "AI–¢–æ–≤–∞—Ä.tj"
    })

if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä AI–¢–æ–≤–∞—Ä.tj...")
    uvicorn.run(app, host="0.0.0.0", port=8000)
