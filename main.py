from fastapi import FastAPI, UploadFile, File, Request, HTTPException
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import io
import os
import base64
import anthropic
import json
import traceback
from typing import List
import logging
import logging.handlers
import time
from datetime import datetime
import io
from PIL import Image

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è STORAGE_BASE)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Somon.tj",
              description="–ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

# CORS –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–∫ Render)
STORAGE_BASE = "/var/data" if os.path.exists("/var/data") else "."

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs("static", exist_ok=True)
os.makedirs(os.path.join(STORAGE_BASE, "uploads"), exist_ok=True)
os.makedirs(os.path.join(STORAGE_BASE, "debug_images"), exist_ok=True)
os.makedirs(os.path.join(STORAGE_BASE, "logs"), exist_ok=True)

logger.info(f"üìÅ –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: {STORAGE_BASE}")
logger.info(
    f"üíæ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–∏—Å–∫ {'–ü–û–î–ö–õ–Æ–ß–ï–ù' if STORAGE_BASE != '.' else '–ù–ï –ù–ê–ô–î–ï–ù'}")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è STORAGE_BASE
log_file_path = os.path.join(STORAGE_BASE, "logs", "app.log")
file_handler = logging.handlers.RotatingFileHandler(
    log_file_path,
    maxBytes=10*1024*1024,  # 10MB
    backupCount=5
)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)
logger.info(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_file_path}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Somon.tj
SOMON_CATEGORIES = """–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Å–≤—è–∑—å
-- –ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
-- –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
-- –†–µ–º–æ–Ω—Ç –∏ —Å–µ—Ä–≤–∏—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
-- –ó–∞–ø—á–∞—Å—Ç–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
-- –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
-- –î—Ä—É–≥–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ —Å–≤—è–∑–∏

–î–µ—Ç—Å–∫–∏–π –º–∏—Ä
-- –î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
-- –î–µ—Ç—Å–∫–∞—è –æ–±—É–≤—å
-- –î–µ—Ç—Å–∫–∞—è –º–µ–±–µ–ª—å
-- –î–µ—Ç—Å–∫–∏–µ –∫–æ–ª—è—Å–∫–∏, –∫–∞—á–µ–ª–∏
-- –î–µ—Ç—Å–∫–∏–µ –∞–≤—Ç–æ–∫—Ä–µ—Å–ª–∞
-- –î–µ—Ç—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
-- –î–µ—Ç—Å–∫–∏–µ —á–∞—Å—ã
-- –ò–≥—Ä—É—à–∫–∏
-- –¢–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–º
-- –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è
-- –¢–æ–≤–∞—Ä—ã –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤
-- –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –∫—É–ø–∞–Ω–∏—è
-- –ü–æ—Å—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
-- –î—Ä—É–≥–∏–µ –¥–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã

–û–¥–µ–∂–¥–∞ –∏ –ª–∏—á–Ω—ã–µ –≤–µ—â–∏
-- –ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
-- –ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞
-- –û–±—É–≤—å
-- –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã, —à–∞—Ä—Ñ—ã, –≥–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã
-- –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è –∏ –∫–æ—Å–º–µ—Ç–∏–∫–∞
-- –ß–∞—Å—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è
-- –î–ª—è —Å–≤–∞–¥—å–±—ã
-- –û–¥–µ–∂–¥–∞ –Ω–∞ –ø—Ä–æ–∫–∞—Ç
-- –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã
-- –ü–æ—Ç–µ—Ä–∏ –∏ –Ω–∞—Ö–æ–¥–∫–∏
-- –ß–µ–º–æ–¥–∞–Ω—ã, —Å—É–º–∫–∏, –∫–ª–∞—Ç—á–∏
-- –¢–∫–∞–Ω–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ—à–∏–≤–∞ –æ–¥–µ–∂–¥—ã

–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞
-- –ù–æ—É—Ç–±—É–∫–∏
-- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
-- –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏
-- –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∏–≥—Ä—ã
-- –ü–ª–∞–Ω—à–µ—Ç—ã –∏ –±—É–∫—Ä–∏–¥–µ—Ä—ã
-- –ü—Ä–∏–Ω—Ç–µ—Ä—ã –∏ —Å–∫–∞–Ω–µ—Ä—ã
-- –ú–æ–Ω–∏—Ç–æ—Ä—ã –∏ –ø—Ä–æ–µ–∫—Ç–æ—Ä—ã
-- –ú–æ–¥–µ–º—ã –∏ —Å–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
-- –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
-- –†–µ–º–æ–Ω—Ç
-- –°–µ—Ä–≤–µ—Ä—ã
-- –î—Ä—É–≥–∞—è —Ç–µ—Ö–Ω–∏–∫–∞

–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
-- –§–æ—Ç–æ –∏ –≤–∏–¥–µ–æ–∫–∞–º–µ—Ä—ã
-- TV, DVD –∏ –≤–∏–¥–µ–æ
-- –ê—É–¥–∏–æ –∏ —Å—Ç–µ—Ä–µ–æ
-- –¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞ –∏ –∫—É—Ö–Ω–∏
-- –î–ª—è –ª–∏—á–Ω–æ–≥–æ —É—Ö–æ–¥–∞
-- –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∏ –∞–ø–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è
-- –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ
-- –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ä–∞–¥–∏–æ–¥–µ—Ç–∞–ª–∏
-- –°–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –æ—Ö—Ä–∞–Ω—ã, "–£–º–Ω—ã–π –¥–æ–º"
-- –î—Ä—É–≥–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
-- –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞

–í—Å–µ –¥–ª—è –¥–æ–º–∞
-- –ú–µ–±–µ–ª—å
-- –¢–µ–∫—Å—Ç–∏–ª—å –∏ –∏–Ω—Ç–µ—Ä—å–µ—Ä
-- –ü–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
-- –ü–æ—Å—É–¥–∞ –∏ –∫—É—Ö–æ–Ω–Ω–∞—è —É—Ç–≤–∞—Ä—å
-- –•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –±—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è
-- –°–∞–¥ –∏ –æ–≥–æ—Ä–æ–¥
-- –°–µ–π—Ñ—ã
-- –ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã
-- –î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞
-- –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤

–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Å—ã—Ä—å–µ –∏ —Ä–µ–º–æ–Ω—Ç
-- –≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
-- –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
-- –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

–•–æ–±–±–∏, –º—É–∑—ã–∫–∞ –∏ —Å–ø–æ—Ä—Ç
-- –°–ø–æ—Ä—Ç –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
-- –í–µ–ª–æ—Å–∏–ø–µ–¥—ã –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
-- –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
-- –ö–Ω–∏–≥–∏ –∏ –∂—É—Ä–Ω–∞–ª—ã
-- CD, DVD, –ø–ª–∞—Å—Ç–∏–Ω–∫–∏ –∏ –∫–∞—Å—Å–µ—Ç—ã
-- –ê–Ω—Ç–∏–∫–≤–∞—Ä–∏–∞—Ç –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
-- –ë–∏–ª–µ—Ç—ã

–ñ–∏–≤–æ—Ç–Ω—ã–µ –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è
-- –°–æ–±–∞–∫–∏
-- –ö–æ—à–∫–∏
-- –ö—Ä–æ–ª–∏–∫–∏
-- –ü—Ç–∏—Ü—ã
-- –í—è–∑–∫–∞
-- –°–∞–¥–æ–≤—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
-- –°–µ–ª—å—Ö–æ–∑ –∂–∏–≤–æ—Ç–Ω—ã–µ
-- –ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ
-- –ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è
-- –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
-- –î—Ä—É–≥–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
-- –û—Ç–¥–∞–º –¥–∞—Ä–æ–º
-- –£—Ç–µ—Ä—è–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
-- –ö–æ—Ä–º –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
-- –ü—á—ë–ª—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø—á–µ–ª–æ–≤–æ–¥—Å—Ç–≤–∞

–í—Å–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
-- –ë–∏–∑–Ω–µ—Å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
-- –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
-- –°—ã—Ä—å—ë –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
-- –ì–æ—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å –≤ –∞—Ä–µ–Ω–¥—É"""


def resize_image_for_claude(image_data: bytes, max_size: int = 2000) -> tuple[bytes, str]:
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º Claude API"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(image_data))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
        width, height = image.size
        logger.info(f"üìê –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
        if width <= max_size and height <= max_size:
            logger.info(
                f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ({max_size}px)")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            original_mime = "image/jpeg"
            if image.format == 'PNG':
                original_mime = "image/png"
            elif image.format == 'WEBP':
                original_mime = "image/webp"
            return image_data, original_mime

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        if width > height:
            new_width = max_size
            new_height = int((height * max_size) / width)
        else:
            new_height = max_size
            new_width = int((width * max_size) / height)

        logger.info(f"üîÑ –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ: {new_width}x{new_height}")

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        resized_image = image.resize(
            (new_width, new_height), Image.Resampling.LANCZOS)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        output = io.BytesIO()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
        output_mime = "image/jpeg"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if image.format in ['JPEG', 'JPG']:
            resized_image.save(output, format='JPEG',
                               quality=75, optimize=True)  # –£–º–µ–Ω—å—à–∏–ª–∏ quality –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            output_mime = "image/jpeg"
        elif image.format == 'PNG':
            resized_image.save(output, format='PNG', optimize=True)
            output_mime = "image/png"
        else:
            # –î–ª—è WebP –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JPEG —Å —Ö–æ—Ä–æ—à–∏–º —Å–∂–∞—Ç–∏–µ–º
            if resized_image.mode in ('RGBA', 'LA', 'P'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è JPEG
                rgb_image = Image.new(
                    'RGB', resized_image.size, (255, 255, 255))
                if resized_image.mode == 'P':
                    resized_image = resized_image.convert('RGBA')
                rgb_image.paste(resized_image, mask=resized_image.split(
                )[-1] if resized_image.mode in ('RGBA', 'LA') else None)
                resized_image = rgb_image
            resized_image.save(output, format='JPEG',
                               quality=75, optimize=True)  # –£–º–µ–Ω—å—à–∏–ª–∏ quality
            output_mime = "image/jpeg"

        resized_data = output.getvalue()
        size_change = len(resized_data)/len(image_data)*100
        logger.info(
            f"‚úÖ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω: {len(image_data)} ‚Üí {len(resized_data)} –±–∞–π—Ç ({size_change:.1f}%)")
        logger.info(f"üìé –§–æ—Ä–º–∞—Ç: {image.format} ‚Üí {output_mime}")

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–ª—Å—è
        if size_change > 150:
            logger.warning(
                f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {size_change-100:.1f}% –∏–∑-–∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {image.format} ‚Üí JPEG")

        return resized_data, output_mime

    except ImportError:
        logger.warning("‚ö†Ô∏è PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞")
        return image_data, "image/jpeg"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image_data, "image/jpeg"


def save_debug_files(files_data: List[tuple], session_id: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        session_folder = os.path.join(STORAGE_BASE, "debug_images", session_id)
        os.makedirs(session_folder, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º
        for idx, (contents, filename) in enumerate(files_data):
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º .webp —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
            debug_filename = f"{idx:02d}.webp"
            debug_path = os.path.join(session_folder, debug_filename)

            with open(debug_path, 'wb') as f:
                f.write(contents)

            logger.info(
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª {idx}: {debug_filename} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {filename}, {len(contents)} –±–∞–π—Ç)")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        metadata = {
            "session_id": session_id,
            "timestamp": datetime.now().isoformat(),
            "total_files": len(files_data),
            "files": [
                {
                    "index": idx,
                    "original_filename": filename,
                    "debug_filename": f"{idx:02d}.webp",
                    "size_bytes": len(contents)
                }
                for idx, (contents, filename) in enumerate(files_data)
            ]
        }

        metadata_path = os.path.join(session_folder, "metadata.json")
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)

        logger.info(f"üìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_path}")
        return session_folder

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        return ""


def analyze_image_with_claude(image_data: bytes, filename: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Claude –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        logger.info(
            f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {filename}, —Ä–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            logger.error(error_msg)
            return error_msg

        logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-4:]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(image_data) > 20 * 1024 * 1024:  # 20MB –ª–∏–º–∏—Ç
            error_msg = f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {len(image_data)/1024/1024:.1f}MB (–º–∞–∫—Å–∏–º—É–º 20MB)"
            logger.error(error_msg)
            return error_msg

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç...")
        client = anthropic.Anthropic(
            api_key=api_key,
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Render
            timeout=60.0
        )

        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        logger.info("üîÑ –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64...")
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        logger.info(f"‚úÖ Base64 –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        file_extension = filename.lower().split(
            '.')[-1] if '.' in filename else 'jpg'
        mime_type_map = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'gif': 'image/gif',
            'webp': 'image/webp'
        }
        mime_type = mime_type_map.get(file_extension, 'image/jpeg')
        logger.info(f"üìé MIME —Ç–∏–ø: {mime_type}")

        logger.info("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –í CLAUDE API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model="claude-sonnet-4-20250514",
            max_tokens=2000,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": mime_type,
                                "data": image_base64,
                            },
                        },
                        {
                            "type": "text",
                            "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

üè∑Ô∏è –¢–û–í–ê–†:
- –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 5-7 —Å–ª–æ–≤)
- –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ —Ç.–¥.)
- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞

üìù –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï:
- –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–≤—ã–π/–±/—É)
- –ë—Ä–µ–Ω–¥ (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)
- 1-2 –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
                        }
                    ],
                }
            ],
        )

        description = message.content[0].text
        logger.info(
            f"‚úÖ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ CLAUDE! –î–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")

        return description

    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê {filename}: {str(e)}"
        logger.error(f"{error_msg}\n–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return error_msg


def load_categories_from_file() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ somon_categories.txt"""
    try:
        categories = {}
        current_category = None

        with open('somon_categories.txt', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue

                if line.startswith('--'):
                    # –≠—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    if current_category:
                        subcategory = line[2:].strip()
                        categories[current_category].append(subcategory)
                else:
                    # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    current_category = line
                    categories[current_category] = []

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ñ–∞–π–ª–∞")
        return categories

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ fallback
        return {
            '–û–¥–µ–∂–¥–∞ –∏ –ª–∏—á–Ω—ã–µ –≤–µ—â–∏': ['–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–û–±—É–≤—å'],
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['–¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Å–≤—è–∑—å', '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∞'],
            '–î–µ—Ç—Å–∫–∏–π –º–∏—Ä': ['–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–ò–≥—Ä—É—à–∫–∏'],
            '–í—Å–µ –¥–ª—è –¥–æ–º–∞': ['–ú–µ–±–µ–ª—å', '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞']
        }


def smart_group_products(descriptions: List[dict]) -> List[dict]:
    """–£–º–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π"""
    groups = []
    used_indices = set()

    for i, desc1 in enumerate(descriptions):
        if i in used_indices:
            continue

        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        group = {
            "title": desc1.get("title", "–¢–æ–≤–∞—Ä"),
            "category": desc1.get("category", "–†–∞–∑–Ω–æ–µ"),
            "subcategory": desc1.get("subcategory", ""),
            "color": desc1.get("color", ""),
            "image_indexes": [i],
            "descriptions": [desc1.get("description", "")]
        }
        used_indices.add(i)

        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
        for j, desc2 in enumerate(descriptions):
            if j <= i or j in used_indices:
                continue

            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (desc1.get("title", "").lower() == desc2.get("title", "").lower() and
                    desc1.get("category", "").lower() == desc2.get("category", "").lower()):
                group["image_indexes"].append(j)
                group["descriptions"].append(desc2.get("description", ""))
                used_indices.add(j)

        groups.append(group)

    return groups


def analyze_images_batch_with_claude(image_batch: List[tuple[bytes, str]]) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç batch –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å—Ç—Ä–æ–∫—É"""
    try:
        logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú BATCH –ê–ù–ê–õ–ò–ó: {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            logger.error(error_msg)
            return ""

        logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-4:]}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç...")
        client = anthropic.Anthropic(
            api_key=api_key,
            timeout=60.0
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
        image_contents = []
        for i, (image_data, filename) in enumerate(image_batch):
            logger.info(f"üñºÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}: {filename}")

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º Claude
            resized_image_data, mime_type = resize_image_for_claude(
                image_data, max_size=2000)

            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = base64.b64encode(resized_image_data).decode('utf-8')

            image_contents.append({
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": mime_type,
                    "data": base64_image
                }
            })

        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –ü–†–û–ú–ü–¢ –ö–ê–ö –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï
        batch_prompt = f"""–ì–†–£–ü–ü–ò–†–û–í–ö–ê –¢–û–í–ê–†–û–í: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –û–î–ò–ù–ê–ö–û–í–´–ï —Ç–æ–≤–∞—Ä—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –æ—Ç 0 –¥–æ {len(image_batch)-1} (–≤—Å–µ–≥–æ {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).

–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ó–ê–ü–û–ú–ù–ò–¢–ï –¢–û–ß–ù–´–ï –ò–ù–î–ï–ö–°–´):
{chr(10).join([f"–ò–Ω–¥–µ–∫—Å {i}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i+1}" for i in range(len(image_batch))])}

–ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –û–î–ò–ù –ò –¢–û–¢ –ñ–ï —Ç–æ–≤–∞—Ä —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤.

–ü–ï–†–ï–î –û–¢–í–ï–¢–û–ú: –ú—ã—Å–ª–µ–Ω–Ω–æ –ø—Ä–æ–Ω—É–º–µ—Ä—É–π—Ç–µ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã!

–ü–†–ê–í–ò–õ–ê:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç–µ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
2. –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ò–î–ï–ù–¢–ò–ß–ù–´–ï –ø—Ä–µ–¥–º–µ—Ç—ã (–æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞, –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä)
3. –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏/—Ü–≤–µ—Ç–∞/—Ä–∞–∑–º–µ—Ä—ã = —Ä–∞–∑–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
4. –ü—Ä–∏ –º–∞–ª–µ–π—à–µ–º —Å–æ–º–Ω–µ–Ω–∏–∏ - –ª—É—á—à–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {SOMON_CATEGORIES}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏:
[
  {{
    "group_id": 1,
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", 
    "subcategory": "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "color": "—Ü–≤–µ—Ç",
    "reasoning": "–ü–æ—á–µ–º—É —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤–º–µ—Å—Ç–µ",
    "image_indexes": [–Ω–æ–º–µ—Ä–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π],
    "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
  }}
]

–í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã –æ—Ç 0 –¥–æ {len(image_batch)-1}
- –ö–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –†–û–í–ù–û –û–î–ò–ù –†–ê–ó
- –û–±—ä—è—Å–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è –≤ –ø–æ–ª–µ "reasoning"!

–í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û JSON –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê."""

        logger.info("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú BATCH –ó–ê–ü–†–û–° –í CLAUDE API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å –∫ Claude —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –Ω–∞ claude.ai
        message = client.messages.create(
            model="claude-sonnet-4-20250514",
            max_tokens=8192,
            temperature=0,  # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
            system="You are a helpful assistant that analyzes images accurately. When grouping images, be EXTREMELY careful with index numbers. Double-check that you're using the correct index for each image. Remember: indices start from 0, not 1. Each index must be used exactly once.",
            messages=[
                {
                    "role": "user",
                    "content": [
                        *image_contents,
                        {
                            "type": "text",
                            "text": batch_prompt
                        }
                    ],
                }
            ],
        )

        response_text = message.content[0].text
        logger.info(
            f"‚úÖ –ü–û–õ–£–ß–ï–ù BATCH –û–¢–í–ï–¢ –û–¢ CLAUDE! –î–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
        logger.info(f"üîç –ü–ï–†–í–´–ï 1000 –°–ò–ú–í–û–õ–û–í –û–¢–í–ï–¢–ê: {response_text[:1000]}")
        logger.info(f"üîç –ü–û–°–õ–ï–î–ù–ò–ï 500 –°–ò–ú–í–û–õ–û–í –û–¢–í–ï–¢–ê: {response_text[-500:]}")

        return response_text

    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê BATCH –ê–ù–ê–õ–ò–ó–ê: {str(e)}"
        logger.error(error_msg)
        return ""


@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        return FileResponse('static/index.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head><title>–û—à–∏–±–∫–∞</title></head>
        <body>
            <h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
            <p>–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª static/index.html —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
        </body>
        </html>
        """, status_code=500)


@app.post("/api/analyze-single")
async def analyze_single_image(file: UploadFile = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        logger.info(
            f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {file.filename}, —Ç–∏–ø: {file.content_type}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}")
            raise HTTPException(
                status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        contents = await file.read()
        logger.info(f"üìÇ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(contents)} –±–∞–π—Ç")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ PIL)
        width, height = 800, 600

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å Claude
        description = analyze_image_with_claude(
            contents, file.filename)

        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä
        image_base64 = base64.b64encode(contents).decode('utf-8')

        return JSONResponse({
            "success": True,
            "result": {
                "id": f"{file.filename}_{int(io.BytesIO(contents).tell())}",
                "filename": file.filename,
                "width": width,
                "height": height,
                "size_bytes": len(contents),
                "image_preview": f"data:image/{file.filename.split('.')[-1]};base64,{image_base64}",
                "description": description
            }
        })

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        }, status_code=500)


@app.post("/api/analyze-grouping")
async def analyze_grouping_diagnostic(files: List[UploadFile] = File(...)):
    """–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–†–£–ü–ü–ò–†–û–í–ö–ò: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ Claude –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–†–£–ü–ü–ò–†–û–í–ö–ò: –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_batch = []
        file_info = []

        logger.info(f"üìã –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
        for i, file in enumerate(files):
            logger.info(f"  {i}: {file.filename} ({file.content_type})")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ —Ç–æ–º —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–æ–º–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤!
        logger.info(f"üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤ (–ë–ï–ó —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏):")
        for i, file in enumerate(files):
            logger.info(f"  {i}: {file.filename} ({file.content_type})")

        for file in files:
            if not file.content_type or not file.content_type.startswith('image/'):
                logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {file.content_type}")
                continue

            try:
                contents = await file.read()
                if len(contents) > 20 * 1024 * 1024:  # 20MB
                    logger.warning(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(contents)/1024/1024:.1f}MB")
                    continue

                image_batch.append((contents, file.filename))
                file_info.append({
                    'filename': file.filename,
                    'content_type': file.content_type,
                    'size': len(contents),
                    'contents': contents
                })

            except Exception as file_error:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.filename}: {file_error}")
                continue

        if not image_batch:
            raise HTTPException(
                status_code=400, detail="–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        session_id = f"diag_{int(time.time())}_{len(image_batch)}"
        debug_folder = save_debug_files(image_batch, session_id)

        logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        logger.info(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(files)}")
        logger.info(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_batch)}")
        logger.info(f"  üìã –ü–æ—Ä—è–¥–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for i, (_, filename) in enumerate(image_batch):
            saved_filename = f"{i:02d}.webp"
            logger.info(
                f"    –ò–Ω–¥–µ–∫—Å {i}: {saved_filename} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {filename})")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
        image_contents = []
        for i, (image_data, filename) in enumerate(image_batch):
            logger.info(f"üñºÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}: {filename}")

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º Claude
            resized_image_data, mime_type = resize_image_for_claude(
                image_data, max_size=2000)

            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = base64.b64encode(resized_image_data).decode('utf-8')

            image_contents.append({
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": mime_type,
                    "data": base64_image
                }
            })

        # –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        diagnostic_prompt = f"""–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–†–£–ü–ü–ò–†–û–í–ö–ò: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –û–î–ò–ù–ê–ö–û–í–´–ï —Ç–æ–≤–∞—Ä—ã.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –æ—Ç 0 –¥–æ {len(image_batch)-1} (–≤—Å–µ–≥–æ {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).

–ü–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ó–ê–ü–û–ú–ù–ò–¢–ï –¢–û–ß–ù–´–ï –ò–ù–î–ï–ö–°–´):
{chr(10).join([f"–ò–Ω–¥–µ–∫—Å {i}: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i+1}" for i in range(len(image_batch))])}

–ó–ê–î–ê–ß–ê: –ù–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –û–î–ò–ù –ò –¢–û–¢ –ñ–ï —Ç–æ–≤–∞—Ä —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤.

–ü–ï–†–ï–î –û–¢–í–ï–¢–û–ú: –ú—ã—Å–ª–µ–Ω–Ω–æ –ø—Ä–æ–Ω—É–º–µ—Ä—É–π—Ç–µ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã!

–ü–†–ê–í–ò–õ–ê:
1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç–µ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
2. –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ò–î–ï–ù–¢–ò–ß–ù–´–ï –ø—Ä–µ–¥–º–µ—Ç—ã (–æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞, –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä)
3. –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏/—Ü–≤–µ—Ç–∞/—Ä–∞–∑–º–µ—Ä—ã = —Ä–∞–∑–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
4. –ü—Ä–∏ –º–∞–ª–µ–π—à–µ–º —Å–æ–º–Ω–µ–Ω–∏–∏ - –ª—É—á—à–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏:
[
  {{
    "group_id": 1,
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
    "reasoning": "–ü–æ—á–µ–º—É —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –≤–º–µ—Å—Ç–µ",
    "image_indexes": [0, 3],
    "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
  }},
  {{
    "group_id": 2,
    "title": "–î—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä",
    "reasoning": "–ü–æ—á–µ–º—É —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä",
    "image_indexes": [1],
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
  }}
]

–í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏–Ω–¥–µ–∫—Å—ã –æ—Ç 0 –¥–æ {len(image_batch)-1}
- –ö–∞–∂–¥—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –†–û–í–ù–û –û–î–ò–ù –†–ê–ó
- –û–±—ä—è—Å–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è –≤ –ø–æ–ª–µ "reasoning"!

–í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û JSON –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê."""

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            api_key = os.getenv("ANTHROPIC_API_KEY")
            client = anthropic.Anthropic(api_key=api_key, timeout=60.0)

            logger.info("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–†–û–° –í CLAUDE API...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å –∫ Claude —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–∫ –Ω–∞ claude.ai
            message = client.messages.create(
                model="claude-sonnet-4-20250514",
                max_tokens=8192,
                temperature=0,  # –î–µ–ª–∞–µ–º –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                system="You are a helpful assistant that analyzes images accurately. When grouping images, be EXTREMELY careful with index numbers. Double-check that you're using the correct index for each image. Remember: indices start from 0, not 1. Each index must be used exactly once.",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            *image_contents,
                            {
                                "type": "text",
                                "text": diagnostic_prompt
                            }
                        ],
                    }
                ],
            )

            response_text = message.content[0].text
            logger.info(
                f"‚úÖ –ü–û–õ–£–ß–ï–ù –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–í–ï–¢! –î–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üîç –ü–û–õ–ù–´–ô –û–¢–í–ï–¢: {response_text}")

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                import json

                # Claude Sonnet 4 –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å JSON –≤ markdown –±–ª–æ–∫
                if response_text.strip().startswith('```'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
                    lines = response_text.strip().split('\n')
                    json_lines = []
                    in_json = False
                    for line in lines:
                        if line.strip() == '```json' or line.strip() == '```':
                            in_json = not in_json
                            continue
                        if in_json or (not line.startswith('```')):
                            json_lines.append(line)
                    response_text = '\n'.join(json_lines)

                groups = json.loads(response_text)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
                max_valid_index = len(image_batch) - 1
                logger.info(
                    f"üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å = {max_valid_index}")

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                all_used_indexes = []
                for group in groups:
                    original_indexes = group.get('image_indexes', [])
                    valid_indexes = []

                    for idx in original_indexes:
                        if isinstance(idx, int) and 0 <= idx <= max_valid_index:
                            valid_indexes.append(idx)
                            all_used_indexes.append(idx)
                        else:
                            logger.warning(
                                f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group.get('group_id', '?')}: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å {idx}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π = {max_valid_index}")

                    group['image_indexes'] = valid_indexes
                    if original_indexes != valid_indexes:
                        logger.info(
                            f"‚úÖ –ì—Ä—É–ø–ø–∞ {group.get('group_id', '?')}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã {original_indexes} ‚Üí {valid_indexes}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                expected_indexes = set(range(len(image_batch)))
                used_indexes = set(all_used_indexes)
                missing_indexes = expected_indexes - used_indexes
                duplicate_indexes = [
                    idx for idx in all_used_indexes if all_used_indexes.count(idx) > 1]

                if missing_indexes:
                    logger.warning(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {sorted(missing_indexes)}")
                if duplicate_indexes:
                    logger.warning(
                        f"‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {sorted(set(duplicate_indexes))}")

                logger.info(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(used_indexes)}/{len(expected_indexes)}")

                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ frontend
                logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø FRONTEND:")
                logger.info(f"  üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ image_batch: {len(image_batch)}")
                logger.info(f"  üîó –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ image_urls:")
                for i, (_, filename) in enumerate(image_batch):
                    url = f"/debug-files/{session_id}/{i:02d}.webp"
                    logger.info(f"    image_urls[{i}] = {url}")

                logger.info(f"  üìã –ì—Ä—É–ø–ø—ã –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã:")
                for group in groups:
                    group_id = group.get('group_id', '?')
                    title = group.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    indexes = group.get('image_indexes', [])
                    logger.info(
                        f"    –ì—Ä—É–ø–ø–∞ {group_id} ({title}): –∏–Ω–¥–µ–∫—Å—ã {indexes}")
                    for idx in indexes:
                        if 0 <= idx < len(image_batch):
                            _, filename = image_batch[idx]
                            expected_url = f"/debug-files/{session_id}/{idx:02d}.webp"
                            logger.info(f"      –ò–Ω–¥–µ–∫—Å {idx} ‚Üí {expected_url}")

                return JSONResponse({
                    "success": True,
                    "diagnostic_mode": "grouping",
                    "total_images": len(image_batch),
                    "groups": groups,
                    "raw_response": response_text,
                    "debug_folder": debug_folder,
                    "session_id": session_id,
                    "file_order": [{"index": i, "filename": filename} for i, (_, filename) in enumerate(image_batch)],
                    "image_urls": [f"/debug-files/{session_id}/{i:02d}.webp" for i, (_, filename) in enumerate(image_batch)],
                    "message": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                })

            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                return JSONResponse({
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}",
                    "raw_response": response_text,
                    "debug_folder": debug_folder,
                    "session_id": session_id
                })

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude: {e}")
            return JSONResponse({
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ Claude API: {str(e)}"
            }, status_code=500)

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {e}\n{traceback.format_exc()}")
        return JSONResponse({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }, status_code=500)


@app.post("/api/analyze-individual")
async def analyze_individual_images(files: List[UploadFile] = File(...)):
    """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç: –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ"""
    try:
        logger.info(
            f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_batch = []
        file_info = []

        logger.info(f"üìã –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
        for i, file in enumerate(files):
            logger.info(f"  {i}: {file.filename} ({file.content_type})")

        for i, file in enumerate(files):
            logger.info(f"  {i}: {file.filename} ({file.content_type})")

        for file in files:
            if not file.content_type or not file.content_type.startswith('image/'):
                logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {file.content_type}")
                continue

            try:
                contents = await file.read()
                if len(contents) > 20 * 1024 * 1024:  # 20MB
                    logger.warning(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(contents)/1024/1024:.1f}MB")
                    continue

                image_batch.append((contents, file.filename))
                file_info.append({
                    'filename': file.filename,
                    'content_type': file.content_type,
                    'size': len(contents),
                    'contents': contents
                })

            except Exception as file_error:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.filename}: {file_error}")
                continue

        if not image_batch:
            raise HTTPException(
                status_code=400, detail="–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        session_id = f"{int(time.time())}_{len(image_batch)}"
        debug_folder = save_debug_files(image_batch, session_id)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        individual_descriptions = []

        for i, (image_data, filename) in enumerate(image_batch):
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i}: {filename}")

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º Claude
            resized_image_data, mime_type = resize_image_for_claude(
                image_data, max_size=2000)

            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            image_base64 = base64.b64encode(resized_image_data).decode('utf-8')

            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            simple_prompt = f"""–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
"–ò–Ω–¥–µ–∫—Å {i}: [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]"

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ò–Ω–¥–µ–∫—Å 0: –°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ LG - –±–µ–ª–∞—è —Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"

–í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û –û–î–ù–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï."""

            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                api_key = os.getenv("ANTHROPIC_API_KEY")
                client = anthropic.Anthropic(api_key=api_key, timeout=60.0)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
                message = client.messages.create(
                    model="claude-sonnet-4-20250514",
                    max_tokens=200,
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {
                                    "type": "image",
                                    "source": {
                                        "type": "base64",
                                        "media_type": mime_type,
                                        "data": image_base64,
                                    },
                                },
                                {
                                    "type": "text",
                                    "text": simple_prompt
                                }
                            ],
                        }
                    ],
                )

                description = message.content[0].text.strip()
                individual_descriptions.append({
                    "index": i,
                    "filename": filename,
                    "description": description
                })

                logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å {i}: {description}")

            except Exception as e:
                error_desc = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                individual_descriptions.append({
                    "index": i,
                    "filename": filename,
                    "description": error_desc
                })
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i}: {e}")

        return JSONResponse({
            "success": True,
            "diagnostic_mode": True,
            "total_images": len(image_batch),
            "descriptions": individual_descriptions,
            "debug_folder": debug_folder,
            "session_id": session_id,
            "image_urls": [f"/debug-files/{session_id}/{i:02d}.webp" for i, (_, filename) in enumerate(image_batch)],
            "message": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω - –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ"
        })

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}\n{traceback.format_exc()}")
        return JSONResponse({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }, status_code=500)


@app.post("/api/analyze-multiple")
async def analyze_multiple_images(files: List[UploadFile] = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (–≤–Ω–µ try –±–ª–æ–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTTP —Å—Ç–∞—Ç—É—Å–∞)
    if len(files) > 50:
        logger.warning(
            f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}, –º–∞–∫—Å–∏–º—É–º 50")
        raise HTTPException(
            status_code=400,
            detail=f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}. –ú–∞–∫—Å–∏–º—É–º 50 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø.")

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_batch = []
        file_info = []

        logger.info(f"üìã –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
        for i, file in enumerate(files):
            logger.info(f"  {i}: {file.filename} ({file.content_type})")

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ —Ç–æ–º —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–æ–º–∞–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤!
        logger.info(f"üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤ (–ë–ï–ó —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏):")
        for i, file in enumerate(files):
            logger.info(f"  {i}: {file.filename} ({file.content_type})")

        for file in files:
            if not file.content_type or not file.content_type.startswith('image/'):
                logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {file.content_type}")
                continue

            try:
                contents = await file.read()
                if len(contents) > 20 * 1024 * 1024:  # 20MB
                    logger.warning(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(contents)/1024/1024:.1f}MB")
                    continue

                image_batch.append((contents, file.filename))
                file_info.append({
                    'filename': file.filename,
                    'content_type': file.content_type,
                    'size': len(contents),
                    'contents': contents
                })

            except Exception as file_error:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.filename}: {file_error}")
                continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–Ω–µ try –±–ª–æ–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTTP —Å—Ç–∞—Ç—É—Å–∞)
        if not image_batch:
            raise HTTPException(
                status_code=400, detail="–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        session_id = f"main_{int(time.time())}_{len(image_batch)}"
        debug_folder = save_debug_files(image_batch, session_id)

        logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        logger.info(f"  üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(files)}")
        logger.info(f"  ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_batch)}")
        logger.info(f"  üìã –ü–æ—Ä—è–¥–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for i, (_, filename) in enumerate(image_batch):
            saved_filename = f"{i:02d}.webp"
            logger.info(
                f"    –ò–Ω–¥–µ–∫—Å {i}: {saved_filename} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {filename})")
        logger.info(f"üóÇÔ∏è –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {debug_folder}")

        # Batch –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        claude_response = analyze_images_batch_with_claude(image_batch)

        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ Claude
        try:
            # Claude Sonnet 4 –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å JSON –≤ markdown –±–ª–æ–∫
            if claude_response.strip().startswith('```'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –±–ª–æ–∫–∞
                lines = claude_response.strip().split('\n')
                json_lines = []
                in_json = False
                for line in lines:
                    if line.strip() == '```json' or line.strip() == '```':
                        in_json = not in_json
                        continue
                    if in_json or (not line.startswith('```')):
                        json_lines.append(line)
                claude_response = '\n'.join(json_lines)

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude
            json_start = claude_response.find('[')
            json_end = claude_response.rfind(']') + 1

            if json_start != -1 and json_end > json_start:
                json_str = claude_response[json_start:json_end]
                products = json.loads(json_str)
                logger.info(
                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ (–∫–∞–∫ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ)
                max_valid_index = len(image_batch) - 1
                logger.info(
                    f"üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å = {max_valid_index}")

                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                all_used_indexes = []
                for product in products:
                    original_indexes = product.get('image_indexes', [])
                    valid_indexes = []

                    for idx in original_indexes:
                        if isinstance(idx, int) and 0 <= idx <= max_valid_index:
                            valid_indexes.append(idx)
                            all_used_indexes.append(idx)
                        else:
                            logger.warning(
                                f"‚ö†Ô∏è –¢–æ–≤–∞—Ä {product.get('title', '?')}: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å {idx}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π = {max_valid_index}")

                    product['image_indexes'] = valid_indexes
                    if original_indexes != valid_indexes:
                        logger.info(
                            f"‚úÖ –¢–æ–≤–∞—Ä {product.get('title', '?')}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã {original_indexes} ‚Üí {valid_indexes}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
                expected_indexes = set(range(len(image_batch)))
                used_indexes = set(all_used_indexes)
                missing_indexes = expected_indexes - used_indexes
                duplicate_indexes = [
                    idx for idx in all_used_indexes if all_used_indexes.count(idx) > 1]

                if missing_indexes:
                    logger.warning(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {sorted(missing_indexes)}")
                if duplicate_indexes:
                    logger.warning(
                        f"‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: {sorted(set(duplicate_indexes))}")

                logger.info(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(used_indexes)}/{len(expected_indexes)}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤
                results = []

                for product_idx, product in enumerate(products):
                    title = product.get('title', f'–¢–æ–≤–∞—Ä {product_idx + 1}')
                    category = product.get('category', '–†–∞–∑–Ω–æ–µ')
                    subcategory = product.get('subcategory', '')
                    color = product.get('color', '')
                    image_indexes = product.get(
                        'image_indexes', [])  # –£–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—à–µ

                    logger.info(
                        f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {product_idx}: '{title}' —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ {image_indexes}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    valid_indexes = image_indexes

                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                    if not valid_indexes and file_info:
                        valid_indexes = [0]
                        logger.info(
                            f"‚úÖ Fallback: –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–Ω–¥–µ–∫—Å 0 –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{title}'")

                    # –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    product_images = []
                    image_filenames = []

                    for img_idx in valid_indexes:
                        if img_idx < len(file_info):
                            info = file_info[img_idx]
                            image_base64 = base64.b64encode(
                                info['contents']).decode('utf-8')
                            product_images.append(
                                f"data:image/{info['filename'].split('.')[-1]};base64,{image_base64}")
                            image_filenames.append(info['filename'])
                            logger.info(
                                f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {img_idx}: {info['filename']}")

                    if not product_images and file_info:  # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        info = file_info[0]
                        image_base64 = base64.b64encode(
                            info['contents']).decode('utf-8')
                        product_images.append(
                            f"data:image/{info['filename'].split('.')[-1]};base64,{image_base64}")
                        valid_indexes = [0]
                        image_filenames = [info['filename']]

                    logger.info(
                        f"  üì∏ –ò—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è '{title}': {len(product_images)} ({image_filenames})")

                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                    description_parts = [f"üè∑Ô∏è {title}"]
                    if color:
                        description_parts.append(f"üé® –¶–≤–µ—Ç: {color}")
                    description_parts.append(f"üìÇ {category}")
                    if subcategory:
                        description_parts.append(f"üìÇ {subcategory}")

                    description = "\n".join(description_parts)

                    results.append({
                        "id": f"product_{product_idx}_{int(time.time())}",
                        "filename": f"grouped_product_{product_idx}",
                        "width": 800,
                        "height": 600,
                        "size_bytes": sum(file_info[i]['size'] for i in valid_indexes if i < len(file_info)),
                        "images": product_images,
                        "image_preview": product_images[0] if product_images else "",
                        "description": description,
                        "title": title,
                        "category": category,
                        "subcategory": subcategory,
                        "color": color,
                        "image_indexes": valid_indexes
                    })

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ return –ü–û–°–õ–ï —Ü–∏–∫–ª–∞ for
                logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø")

                return JSONResponse({
                    "success": True,
                    "results": results,
                    "processed_count": len(results),
                    "total_files": len(files),
                    "grouped": True,
                    "debug_folder": debug_folder,
                    "session_id": session_id,
                    "summary": {
                        "total_images": len(files),
                        "processed_images": len(file_info),
                        "grouped_products": len(results)
                    }
                })

        except (json.JSONDecodeError, ValueError) as e:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            logger.info(f"üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç Claude: {claude_response[:500]}...")

        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        results = []
        for i, info in enumerate(file_info):
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            description = f"üè∑Ô∏è –¢–û–í–ê–†: –¢–æ–≤–∞—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {info['filename']}\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø: –†–∞–∑–Ω–æ–µ\nüìù –û–ü–ò–°–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            image_base64 = base64.b64encode(info['contents']).decode('utf-8')

            results.append({
                "id": f"{info['filename']}_{info['size']}_{i}",
                "filename": info['filename'],
                "width": 800,  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                "height": 600,
                "size_bytes": info['size'],
                "images": [f"data:image/{info['filename'].split('.')[-1]};base64,{image_base64}"],
                "image_preview": f"data:image/{info['filename'].split('.')[-1]};base64,{image_base64}",
                "description": description
            })

        logger.info(
            f"‚úÖ Fallback –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        return JSONResponse({
            "success": True,
            "results": results,
            "processed_count": len(results),
            "total_files": len(files),
            "grouped": False,
            "debug_folder": debug_folder,
            "session_id": session_id,
            "summary": {
                "total_images": len(files),
                "processed_images": len(results)
            }
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –∞–Ω–∞–ª–∏–∑–∞: {e}\n{traceback.format_exc()}")
        return JSONResponse({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }, status_code=500)


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    api_key = os.getenv("ANTHROPIC_API_KEY")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude API
    claude_status = "unknown"
    try:
        if api_key:
            client = anthropic.Anthropic(
                api_key=api_key,
                timeout=60.0
            )
            # –ù–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è
            claude_status = "configured"
    except Exception as e:
        claude_status = f"error: {str(e)}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏—Å–∫–∞
    disk_status = {
        "persistent_disk_mounted": STORAGE_BASE != ".",
        "storage_path": STORAGE_BASE,
        "folders": {
            "debug_images": os.path.exists(os.path.join(STORAGE_BASE, "debug_images")),
            "logs": os.path.exists(os.path.join(STORAGE_BASE, "logs")),
            "uploads": os.path.exists(os.path.join(STORAGE_BASE, "uploads"))
        }
    }

    return JSONResponse({
        "status": "healthy",
        "api_key_configured": bool(api_key),
        "api_key_preview": f"{api_key[:10]}...{api_key[-4:]}" if api_key else None,
        "claude_status": claude_status,
        "disk_status": disk_status,
        "message": "üöÄ Somon.tj API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    })


@app.get("/api/test")
async def test_endpoint():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return JSONResponse({
        "message": "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": "2025-06-14",
        "service": "Somon.tj"
    })


@app.get("/api/categories")
async def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π Somon.tj"""
    try:
        categories = load_categories_from_file()
        return JSONResponse({
            "success": True,
            "categories": categories,
            "total_categories": len(categories),
            "message": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e),
            "categories": {}
        }, status_code=500)


@app.get("/diagnostic", response_class=HTMLResponse)
async def diagnostic_page():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        return FileResponse('static/diagnostic.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head><title>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</title></head>
        <body>
            <h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h1>
            <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API: POST /api/analyze-individual</p>
        </body>
        </html>
        """, status_code=500)


@app.get("/debug", response_class=HTMLResponse)
async def debug_page():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        return FileResponse('static/debug.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head><title>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞</title></head>
        <body>
            <h1>üîß –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞ Somon.tj</h1>
            <button onclick="fetch('/api/health').then(r=>r.json()).then(d=>alert(JSON.stringify(d,null,2)))">
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API
            </button>
            <hr>
            <div>
                <h3>–§–∞–π–ª—ã —Å—Ç–∞—Ç–∏–∫–∏:</h3>
                <ul>
                    <li><a href="/static/index.html">index.html</a></li>
                    <li><a href="/static/debug.html">debug.html</a></li>
                </ul>
            </div>
            <script>
                console.log('–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                fetch('/api/health')
                    .then(r => r.json())
                    .then(data => console.log('API Health:', data))
                    .catch(e => console.error('API Error:', e));
            </script>
        </body>
        </html>
        """, status_code=200)


@app.get("/api/logs")
async def get_logs(lines: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
    try:
        log_file = os.path.join(STORAGE_BASE, "logs", "app.log")
        if not os.path.exists(log_file):
            return JSONResponse({
                "success": False,
                "message": "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "logs": []
            })

        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            recent_lines = all_lines[-lines:] if len(
                all_lines) > lines else all_lines

        return JSONResponse({
            "success": True,
            "total_lines": len(all_lines),
            "returned_lines": len(recent_lines),
            "logs": [line.strip() for line in recent_lines]
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e),
            "logs": []
        }, status_code=500)


@app.get("/logs", response_class=HTMLResponse)
async def logs_page():
    """–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–õ–æ–≥–∏ Somon.tj</title>
        <meta charset="utf-8">
        <style>
            body { font-family: monospace; margin: 20px; background: #1a1a1a; color: #00ff00; }
            .log-container { background: #000; padding: 20px; border-radius: 5px; max-height: 80vh; overflow-y: auto; }
            .log-line { margin: 2px 0; white-space: pre-wrap; }
            .error { color: #ff4444; }
            .warning { color: #ffaa00; }
            .info { color: #00ff00; }
            .controls { margin-bottom: 20px; }
            button { padding: 10px 20px; margin: 5px; background: #333; color: #fff; border: none; border-radius: 3px; cursor: pointer; }
            button:hover { background: #555; }
            select { padding: 8px; background: #333; color: #fff; border: 1px solid #555; }
        </style>
    </head>
    <body>
        <h1>üìã –õ–æ–≥–∏ Somon.tj</h1>
        
        <div class="controls">
            <button onclick="loadLogs()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            <button onclick="autoRefresh()">‚è∞ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</button>
            <button onclick="clearLogs()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω</button>
            <select id="lineCount">
                <option value="50">50 —Å—Ç—Ä–æ–∫</option>
                <option value="100" selected>100 —Å—Ç—Ä–æ–∫</option>
                <option value="200">200 —Å—Ç—Ä–æ–∫</option>
                <option value="500">500 —Å—Ç—Ä–æ–∫</option>
            </select>
        </div>
        
        <div class="log-container" id="logContainer">
            <div class="log-line">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
        </div>

        <script>
            let autoRefreshInterval = null;
            
            function loadLogs() {
                const lines = document.getElementById('lineCount').value;
                fetch(`/api/logs?lines=${lines}`)
                    .then(r => r.json())
                    .then(data => {
                        const container = document.getElementById('logContainer');
                        if (data.success) {
                            container.innerHTML = data.logs.map(line => {
                                let className = 'info';
                                if (line.includes('ERROR') || line.includes('‚ùå')) className = 'error';
                                else if (line.includes('WARNING') || line.includes('‚ö†Ô∏è')) className = 'warning';
                                
                                return `<div class="log-line ${className}">${escapeHtml(line)}</div>`;
                            }).join('');
                            container.scrollTop = container.scrollHeight;
                        } else {
                            container.innerHTML = `<div class="log-line error">–û—à–∏–±–∫–∞: ${data.error || data.message}</div>`;
                        }
                    })
                    .catch(e => {
                        document.getElementById('logContainer').innerHTML = 
                            `<div class="log-line error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}</div>`;
                    });
            }
            
            function autoRefresh() {
                if (autoRefreshInterval) {
                    clearInterval(autoRefreshInterval);
                    autoRefreshInterval = null;
                    document.querySelector('button[onclick="autoRefresh()"]').textContent = '‚è∞ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
                } else {
                    autoRefreshInterval = setInterval(loadLogs, 3000);
                    document.querySelector('button[onclick="autoRefresh()"]').textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
                }
            }
            
            function clearLogs() {
                document.getElementById('logContainer').innerHTML = '<div class="log-line">–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤.</div>';
            }
            
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            loadLogs();
        </script>
    </body>
    </html>
    """)


@app.get("/debug-files/{session_id}")
async def get_debug_files(session_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    try:
        debug_folder = os.path.join(STORAGE_BASE, "debug_images", session_id)
        if not os.path.exists(debug_folder):
            raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_path = os.path.join(debug_folder, "metadata.json")
        if os.path.exists(metadata_path):
            with open(metadata_path, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
        else:
            metadata = {"files": []}

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files = []
        for filename in os.listdir(debug_folder):
            if filename != "metadata.json":
                file_path = os.path.join(debug_folder, filename)
                files.append({
                    "filename": filename,
                    "size": os.path.getsize(file_path),
                    "url": f"/debug-files/{session_id}/{filename}"
                })

        return JSONResponse({
            "success": True,
            "session_id": session_id,
            "metadata": metadata,
            "files": files
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        }, status_code=500)


@app.get("/debug-files/{session_id}/{filename}")
async def get_debug_file(session_id: str, filename: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        file_path = os.path.join(
            STORAGE_BASE, "debug_images", session_id, filename)
        if not os.path.exists(file_path):
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return FileResponse(file_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/file-structure")
async def get_file_structure():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        def scan_directory(path, max_depth=3, current_depth=0):
            items = []
            if current_depth >= max_depth:
                return items

            try:
                for item in sorted(os.listdir(path)):
                    if item.startswith('.'):
                        continue

                    item_path = os.path.join(path, item)
                    if os.path.isdir(item_path):
                        items.append({
                            "name": item,
                            "type": "directory",
                            "path": item_path,
                            "children": scan_directory(item_path, max_depth, current_depth + 1)
                        })
                    else:
                        try:
                            size = os.path.getsize(item_path)
                            items.append({
                                "name": item,
                                "type": "file",
                                "path": item_path,
                                "size": size
                            })
                        except:
                            items.append({
                                "name": item,
                                "type": "file",
                                "path": item_path,
                                "size": 0
                            })
            except PermissionError:
                pass

            return items

        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        current_dir = os.getcwd()
        structure = {
            "current_directory": current_dir,
            "structure": scan_directory(current_dir),
            "disk_usage": {}
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        try:
            import shutil
            total, used, free = shutil.disk_usage(current_dir)
            structure["disk_usage"] = {
                "total_gb": round(total / (1024**3), 2),
                "used_gb": round(used / (1024**3), 2),
                "free_gb": round(free / (1024**3), 2)
            }
        except:
            pass

        return JSONResponse({
            "success": True,
            "data": structure
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        }, status_code=500)


@app.get("/file-browser", response_class=HTMLResponse)
async def file_browser():
    """–í–µ–±-–±—Ä–∞—É–∑–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–§–∞–π–ª–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä - Somon.tj</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; }
            .file-tree { margin: 20px 0; }
            .file-item { margin: 5px 0; padding: 8px; border-radius: 4px; cursor: pointer; }
            .file-item:hover { background: #f0f0f0; }
            .directory { font-weight: bold; color: #2196F3; }
            .file { color: #666; }
            .file-size { color: #999; font-size: 0.9em; margin-left: 10px; }
            .indent-1 { margin-left: 20px; }
            .indent-2 { margin-left: 40px; }
            .indent-3 { margin-left: 60px; }
            .disk-info { background: #e3f2fd; padding: 15px; border-radius: 4px; margin-bottom: 20px; }
            .refresh-btn { background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
            .refresh-btn:hover { background: #45a049; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üìÅ –§–∞–π–ª–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä Somon.tj</h1>
            <button class="refresh-btn" onclick="loadFileStructure()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            
            <div id="diskInfo" class="disk-info">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ...</div>
            <div id="fileTree" class="file-tree">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...</div>
        </div>
        
        <script>
            function formatBytes(bytes) {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            function renderFileTree(items, depth = 0) {
                let html = '';
                for (const item of items) {
                    const indentClass = `indent-${Math.min(depth, 3)}`;
                    if (item.type === 'directory') {
                        html += `<div class="file-item directory ${indentClass}">üìÅ ${item.name}/</div>`;
                        if (item.children && item.children.length > 0) {
                            html += renderFileTree(item.children, depth + 1);
                        }
                    } else {
                        const size = item.size ? formatBytes(item.size) : '';
                        html += `<div class="file-item file ${indentClass}">üìÑ ${item.name}<span class="file-size">${size}</span></div>`;
                    }
                }
                return html;
            }
            
            async function loadFileStructure() {
                try {
                    const response = await fetch('/api/file-structure');
                    const data = await response.json();
                    
                    if (data.success) {
                        const structure = data.data;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
                        const diskInfo = document.getElementById('diskInfo');
                        if (structure.disk_usage && structure.disk_usage.total_gb) {
                            diskInfo.innerHTML = `
                                <strong>üíæ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:</strong><br>
                                üìä –í—Å–µ–≥–æ: ${structure.disk_usage.total_gb} GB<br>
                                üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${structure.disk_usage.used_gb} GB<br>
                                üìâ –°–≤–æ–±–æ–¥–Ω–æ: ${structure.disk_usage.free_gb} GB<br>
                                üìç –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: ${structure.current_directory}
                            `;
                        } else {
                            diskInfo.innerHTML = `üìç –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: ${structure.current_directory}`;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
                        const fileTree = document.getElementById('fileTree');
                        fileTree.innerHTML = renderFileTree(structure.structure);
                        
                    } else {
                        document.getElementById('fileTree').innerHTML = `<p>–û—à–∏–±–∫–∞: ${data.error}</p>`;
                    }
                } catch (error) {
                    document.getElementById('fileTree').innerHTML = `<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</p>`;
                }
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            loadFileStructure();
        </script>
    </body>
    </html>
    """)


if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä AI–¢–æ–≤–∞—Ä.tj...")
    uvicorn.run(app, host="0.0.0.0", port=8000)
