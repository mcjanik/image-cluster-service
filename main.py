from fastapi import FastAPI, UploadFile, File, Request, HTTPException
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import io
import os
import base64
import anthropic
import json
import traceback
from typing import List
import logging
import logging.handlers

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.handlers.RotatingFileHandler(
            'logs/app.log',
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5
        )
    ]
)
logger = logging.getLogger(__name__)

app = FastAPI(title="Somon.tj",
              description="–ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

# CORS –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs("static", exist_ok=True)
os.makedirs("uploads", exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")


def analyze_image_with_claude(image_data: bytes, filename: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Claude –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        logger.info(
            f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {filename}, —Ä–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            logger.error(error_msg)
            return error_msg

        logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-4:]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if len(image_data) > 20 * 1024 * 1024:  # 20MB –ª–∏–º–∏—Ç
            error_msg = f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {len(image_data)/1024/1024:.1f}MB (–º–∞–∫—Å–∏–º—É–º 20MB)"
            logger.error(error_msg)
            return error_msg

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç...")
        client = anthropic.Anthropic(
            api_key=api_key,
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Render
            timeout=60.0
        )

        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        logger.info("üîÑ –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64...")
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        logger.info(f"‚úÖ Base64 –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        file_extension = filename.lower().split(
            '.')[-1] if '.' in filename else 'jpg'
        mime_type_map = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'gif': 'image/gif',
            'webp': 'image/webp'
        }
        mime_type = mime_type_map.get(file_extension, 'image/jpeg')
        logger.info(f"üìé MIME —Ç–∏–ø: {mime_type}")

        logger.info("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –í CLAUDE API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2000,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": mime_type,
                                "data": image_base64,
                            },
                        },
                        {
                            "type": "text",
                            "text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∞–π–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

üè∑Ô∏è –¢–û–í–ê–† –ò –ö–ê–¢–ï–ì–û–†–ò–Ø:
- –ß—Ç–æ —ç—Ç–æ –∑–∞ —Ç–æ–≤–∞—Ä/–ø—Ä–µ–¥–º–µ—Ç
- –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è (–æ–¥–µ–∂–¥–∞, —Ç–µ—Ö–Ω–∏–∫–∞, –º–µ–±–µ–ª—å, –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏ —Ç.–¥.)
- –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞

üìù –î–ï–¢–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:
- –ú–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)
- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–æ–≤—ã–π/–±/—É, –≤–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è/–∏–∑–Ω–æ—Å)
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ñ—É–Ω–∫—Ü–∏–∏
- –ë—Ä–µ–Ω–¥ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–µ—Å–ª–∏ —Ä–∞–∑–ª–∏—á–∏–º–æ)
- –ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å (—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç)

üí∞ –î–õ–Ø –û–ë–™–Ø–í–õ–ï–ù–ò–Ø:
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏
- –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
- –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è

–û—Ç–≤–µ—á–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω–æ. –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä."""
                        }
                    ],
                }
            ],
        )

        description = message.content[0].text
        logger.info(
            f"‚úÖ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ CLAUDE! –î–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")

        return description

    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê {filename}: {str(e)}"
        logger.error(f"{error_msg}\n–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        return error_msg


def analyze_images_batch_with_claude(image_batch: List[tuple[bytes, str]]) -> List[str]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç batch –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º"""
    try:
        logger.info(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú BATCH –ê–ù–ê–õ–ò–ó: {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            logger.error(error_msg)
            return [error_msg] * len(image_batch)

        logger.info(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-4:]}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç...")
        client = anthropic.Anthropic(
            api_key=api_key,
            timeout=60.0
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
        image_contents = []
        for i, (image_data, filename) in enumerate(image_batch):
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = base64.b64encode(image_data).decode('utf-8')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type = "image/jpeg"
            if filename.lower().endswith('.png'):
                mime_type = "image/png"
            elif filename.lower().endswith('.webp'):
                mime_type = "image/webp"

            image_contents.append({
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": mime_type,
                    "data": base64_image
                }
            })

        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        batch_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å–≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º.

–í–ê–ñ–ù–û: 
- –û–¥–∏–Ω —Ç–æ–≤–∞—Ä –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤ –∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ñ–æ—Ç–æ
- –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä—ã, –º–æ–¥–µ–ª–∏ = —Ä–∞–∑–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
- –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö –ª—É—á—à–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç, –Ω–æ –∏ –º–æ–¥–µ–ª—å, –±—Ä–µ–Ω–¥, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:
{open('code_for_learning/somon-structure.txt', 'r', encoding='utf-8').read()}

–í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
[
  {{
    "title": "–ö—Ä–∞—Å–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å—Ç—É–ª",
    "category": "–î–µ—Ç—Å–∫–∏–π –º–∏—Ä", 
    "subcategory": "–î–µ—Ç—Å–∫–∞—è –º–µ–±–µ–ª—å",
    "image_indexes": [0, 1, 2]
  }},
  {{
    "title": "–°–∏–Ω–∏–π –¥–µ—Ç—Å–∫–∏–π —Å—Ç—É–ª",
    "category": "–î–µ—Ç—Å–∫–∏–π –º–∏—Ä",
    "subcategory": "–î–µ—Ç—Å–∫–∞—è –º–µ–±–µ–ª—å", 
    "image_indexes": [3, 4]
  }}
]

–ì–¥–µ image_indexes - –Ω–æ–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–Ω–∞—á–∏–Ω–∞—è —Å 0), –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –û–î–ò–ù —Ç–æ–≤–∞—Ä.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏—Ç–µ –í–°–ï {len(image_batch)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—ã!

–í–ï–†–ù–ò–¢–ï –¢–û–õ–¨–ö–û JSON, –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –¢–ï–ö–°–¢–ê."""

        logger.info("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú BATCH –ó–ê–ü–†–û–° –í CLAUDE API...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=8192,
            messages=[
                {
                    "role": "user",
                    "content": [
                        *image_contents,
                        {
                            "type": "text",
                            "text": batch_prompt
                        }
                    ],
                }
            ],
        )

        response_text = message.content[0].text
        logger.info(
            f"‚úÖ –ü–û–õ–£–ß–ï–ù BATCH –û–¢–í–ï–¢ –û–¢ CLAUDE! –î–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
        logger.info(f"üîç –ü–ï–†–í–´–ï 1000 –°–ò–ú–í–û–õ–û–í –û–¢–í–ï–¢–ê: {response_text[:1000]}")
        logger.info(f"üîç –ü–û–°–õ–ï–î–ù–ò–ï 500 –°–ò–ú–í–û–õ–û–í –û–¢–í–ï–¢–ê: {response_text[-500:]}")

        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ ```json```)
            json_start = response_text.find('[')
            json_end = response_text.rfind(']') + 1

            logger.info(f"üîç JSON –ø–æ–∑–∏—Ü–∏–∏: start={json_start}, end={json_end}")

            if json_start == -1 or json_end == 0:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")

            json_str = response_text[json_start:json_end]
            logger.info(
                f"üîç –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô JSON (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {json_str[:500]}")

            products = json.loads(json_str)

            logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

            # –õ–û–ì–ò–†–£–ï–ú –ö–ê–ñ–î–´–ô –¢–û–í–ê–†
            for i, product in enumerate(products):
                title = product.get('title', '–¢–æ–≤–∞—Ä')
                image_indexes = product.get('image_indexes', [])
                logger.info(
                    f"üîç –¢–æ–≤–∞—Ä {i+1}: '{title}' -> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_indexes}")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
            total_images_in_groups = sum(
                len(product.get('image_indexes', [])) for product in products)
            logger.info(
                f"üîç –í–°–ï–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö: {total_images_in_groups} –∏–∑ {len(image_batch)}")

            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            descriptions = [""] * len(image_batch)

            for product in products:
                title = product.get('title', '–¢–æ–≤–∞—Ä')
                category = product.get('category', '–†–∞–∑–Ω–æ–µ')
                subcategory = product.get('subcategory', '')
                image_indexes = product.get('image_indexes', [])

                description = f"""üè∑Ô∏è –¢–û–í–ê–†: {title}
üìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø: {category}
üìÇ –ü–û–î–ö–ê–¢–ï–ì–û–†–ò–Ø: {subcategory}
üìù –û–ü–ò–°–ê–ù–ò–ï: {title} - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}
üí∞ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ) –∏ —Ü–µ–Ω—É"""

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                for idx in image_indexes:
                    if 0 <= idx < len(descriptions):
                        descriptions[idx] = description
                        logger.info(
                            f"üîç –ü—Ä–∏–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é {idx}: {title}")
                    else:
                        logger.warning(
                            f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {idx} (–º–∞–∫—Å–∏–º—É–º {len(descriptions)-1})")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
            empty_count = 0
            for i, desc in enumerate(descriptions):
                if not desc:
                    descriptions[i] = f"üè∑Ô∏è –¢–û–í–ê–†: –¢–æ–≤–∞—Ä {i+1}\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø: –†–∞–∑–Ω–æ–µ\nüìù –û–ü–ò–°–ê–ù–ò–ï: –¢–æ–≤–∞—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                    empty_count += 1
                    logger.warning(
                        f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i} –Ω–µ –±—ã–ª–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ, —Å–æ–∑–¥–∞–ª–∏ fallback –æ–ø–∏—Å–∞–Ω–∏–µ")

            logger.info(
                f"‚úÖ Batch –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(descriptions)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {empty_count} fallback –æ–ø–∏—Å–∞–Ω–∏–π")
            return descriptions

        except (json.JSONDecodeError, ValueError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç Claude: {response_text[:500]}...")

            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
            fallback_descriptions = []
            for i, (_, filename) in enumerate(image_batch):
                fallback_descriptions.append(
                    f"üè∑Ô∏è –¢–û–í–ê–†: –¢–æ–≤–∞—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø: –†–∞–∑–Ω–æ–µ\nüìù –û–ü–ò–°–ê–ù–ò–ï: –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏")

            return fallback_descriptions

    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê BATCH –ê–ù–ê–õ–ò–ó–ê: {str(e)}"
        logger.error(error_msg)
        return [error_msg] * len(image_batch)


@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        return FileResponse('static/index.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head><title>–û—à–∏–±–∫–∞</title></head>
        <body>
            <h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
            <p>–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            <p>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª static/index.html —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
        </body>
        </html>
        """, status_code=500)


@app.post("/api/analyze-single")
async def analyze_single_image(file: UploadFile = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        logger.info(
            f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {file.filename}, —Ç–∏–ø: {file.content_type}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.content_type}")
            raise HTTPException(
                status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        contents = await file.read()
        logger.info(f"üìÇ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(contents)} –±–∞–π—Ç")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ PIL)
        width, height = 800, 600

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å Claude
        description = analyze_image_with_claude(
            contents, file.filename)

        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä
        image_base64 = base64.b64encode(contents).decode('utf-8')

        return JSONResponse({
            "success": True,
            "result": {
                "id": f"{file.filename}_{int(io.BytesIO(contents).tell())}",
                "filename": file.filename,
                "width": width,
                "height": height,
                "size_bytes": len(contents),
                "image_preview": f"data:image/{file.filename.split('.')[-1]};base64,{image_base64}",
                "description": description
            }
        })

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        }, status_code=500)


@app.post("/api/analyze-multiple")
async def analyze_multiple_images(files: List[UploadFile] = File(...)):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        if len(files) > 14:
            logger.warning(
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}, –º–∞–∫—Å–∏–º—É–º 14")
            raise HTTPException(
                status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 14 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_batch = []
        file_info = []  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ

        for file in files:
            if not file.content_type or not file.content_type.startswith('image/'):
                logger.warning(
                    f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø: {file.content_type}")
                continue

            try:
                contents = await file.read()

                if len(contents) > 20 * 1024 * 1024:  # 20MB
                    logger.warning(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {file.filename} - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(contents)/1024/1024:.1f}MB")
                    continue

                image_batch.append((contents, file.filename))
                file_info.append({
                    'filename': file.filename,
                    'content_type': file.content_type,
                    'size': len(contents),
                    'contents': contents  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–µ–≤—å—é
                })

            except Exception as file_error:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.filename}: {file_error}")
                continue

        if not image_batch:
            raise HTTPException(
                status_code=400, detail="–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # Batch –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        descriptions = analyze_images_batch_with_claude(image_batch)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for i, (description, info) in enumerate(zip(descriptions, file_info)):
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
            image_base64 = base64.b64encode(info['contents']).decode('utf-8')

            results.append({
                "id": f"{info['filename']}_{info['size']}_{i}",
                "filename": info['filename'],
                "width": 800,  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                "height": 600,
                "size_bytes": info['size'],
                "image_preview": f"data:image/{info['filename'].split('.')[-1]};base64,{image_base64}",
                "description": description
            })

        logger.info(
            f"‚úÖ Batch –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        return JSONResponse({
            "success": True,
            "results": results,
            "processed_count": len(results),
            "total_files": len(files),
            "summary": {
                "total_images": len(files),
                "processed_images": len(results)
            }
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ batch –∞–Ω–∞–ª–∏–∑–∞: {e}\n{traceback.format_exc()}")
        return JSONResponse({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }, status_code=500)


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    api_key = os.getenv("ANTHROPIC_API_KEY")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude API
    claude_status = "unknown"
    try:
        if api_key:
            client = anthropic.Anthropic(
                api_key=api_key,
                timeout=60.0
            )
            # –ù–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è
            claude_status = "configured"
    except Exception as e:
        claude_status = f"error: {str(e)}"

    return JSONResponse({
        "status": "healthy",
        "api_key_configured": bool(api_key),
        "api_key_preview": f"{api_key[:10]}...{api_key[-4:]}" if api_key else None,
        "claude_status": claude_status,
        "message": "üöÄ Somon.tj API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    })


@app.get("/api/test")
async def test_endpoint():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return JSONResponse({
        "message": "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "timestamp": "2025-06-14",
        "service": "Somon.tj"
    })


@app.get("/debug", response_class=HTMLResponse)
async def debug_page():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        return FileResponse('static/debug.html')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head><title>–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞</title></head>
        <body>
            <h1>üîß –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞ Somon.tj</h1>
            <button onclick="fetch('/api/health').then(r=>r.json()).then(d=>alert(JSON.stringify(d,null,2)))">
                –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API
            </button>
            <hr>
            <div>
                <h3>–§–∞–π–ª—ã —Å—Ç–∞—Ç–∏–∫–∏:</h3>
                <ul>
                    <li><a href="/static/index.html">index.html</a></li>
                    <li><a href="/static/debug.html">debug.html</a></li>
                </ul>
            </div>
            <script>
                console.log('–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                fetch('/api/health')
                    .then(r => r.json())
                    .then(data => console.log('API Health:', data))
                    .catch(e => console.error('API Error:', e));
            </script>
        </body>
        </html>
        """, status_code=200)


@app.get("/api/logs")
async def get_logs(lines: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤"""
    try:
        log_file = "logs/app.log"
        if not os.path.exists(log_file):
            return JSONResponse({
                "success": False,
                "message": "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "logs": []
            })

        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        with open(log_file, 'r', encoding='utf-8') as f:
            all_lines = f.readlines()
            recent_lines = all_lines[-lines:] if len(
                all_lines) > lines else all_lines

        return JSONResponse({
            "success": True,
            "total_lines": len(all_lines),
            "returned_lines": len(recent_lines),
            "logs": [line.strip() for line in recent_lines]
        })

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e),
            "logs": []
        }, status_code=500)


@app.get("/logs", response_class=HTMLResponse)
async def logs_page():
    """–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–õ–æ–≥–∏ Somon.tj</title>
        <meta charset="utf-8">
        <style>
            body { font-family: monospace; margin: 20px; background: #1a1a1a; color: #00ff00; }
            .log-container { background: #000; padding: 20px; border-radius: 5px; max-height: 80vh; overflow-y: auto; }
            .log-line { margin: 2px 0; white-space: pre-wrap; }
            .error { color: #ff4444; }
            .warning { color: #ffaa00; }
            .info { color: #00ff00; }
            .controls { margin-bottom: 20px; }
            button { padding: 10px 20px; margin: 5px; background: #333; color: #fff; border: none; border-radius: 3px; cursor: pointer; }
            button:hover { background: #555; }
            select { padding: 8px; background: #333; color: #fff; border: 1px solid #555; }
        </style>
    </head>
    <body>
        <h1>üìã –õ–æ–≥–∏ Somon.tj</h1>
        
        <div class="controls">
            <button onclick="loadLogs()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
            <button onclick="autoRefresh()">‚è∞ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</button>
            <button onclick="clearLogs()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω</button>
            <select id="lineCount">
                <option value="50">50 —Å—Ç—Ä–æ–∫</option>
                <option value="100" selected>100 —Å—Ç—Ä–æ–∫</option>
                <option value="200">200 —Å—Ç—Ä–æ–∫</option>
                <option value="500">500 —Å—Ç—Ä–æ–∫</option>
            </select>
        </div>
        
        <div class="log-container" id="logContainer">
            <div class="log-line">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
        </div>

        <script>
            let autoRefreshInterval = null;
            
            function loadLogs() {
                const lines = document.getElementById('lineCount').value;
                fetch(`/api/logs?lines=${lines}`)
                    .then(r => r.json())
                    .then(data => {
                        const container = document.getElementById('logContainer');
                        if (data.success) {
                            container.innerHTML = data.logs.map(line => {
                                let className = 'info';
                                if (line.includes('ERROR') || line.includes('‚ùå')) className = 'error';
                                else if (line.includes('WARNING') || line.includes('‚ö†Ô∏è')) className = 'warning';
                                
                                return `<div class="log-line ${className}">${escapeHtml(line)}</div>`;
                            }).join('');
                            container.scrollTop = container.scrollHeight;
                        } else {
                            container.innerHTML = `<div class="log-line error">–û—à–∏–±–∫–∞: ${data.error || data.message}</div>`;
                        }
                    })
                    .catch(e => {
                        document.getElementById('logContainer').innerHTML = 
                            `<div class="log-line error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}</div>`;
                    });
            }
            
            function autoRefresh() {
                if (autoRefreshInterval) {
                    clearInterval(autoRefreshInterval);
                    autoRefreshInterval = null;
                    document.querySelector('button[onclick="autoRefresh()"]').textContent = '‚è∞ –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
                } else {
                    autoRefreshInterval = setInterval(loadLogs, 3000);
                    document.querySelector('button[onclick="autoRefresh()"]').textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
                }
            }
            
            function clearLogs() {
                document.getElementById('logContainer').innerHTML = '<div class="log-line">–≠–∫—Ä–∞–Ω –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤.</div>';
            }
            
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            loadLogs();
        </script>
    </body>
    </html>
    """)


if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä AI–¢–æ–≤–∞—Ä.tj...")
    uvicorn.run(app, host="0.0.0.0", port=8000)
