from fastapi import FastAPI, UploadFile, File, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from PIL import Image
import io
import os
import base64
import anthropic

app = FastAPI()
os.makedirs("templates", exist_ok=True)
templates = Jinja2Templates(directory="templates")

def analyze_image_with_claude(image_data: bytes, filename: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Claude –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        print(f"üîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            error_msg = "‚ùå API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            print(error_msg)
            return error_msg
        
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:15]}...{api_key[-4:]}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–¥–µ—Å—å –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        print("üîÑ –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        print(f"‚úÖ Base64 –≥–æ—Ç–æ–≤, –¥–ª–∏–Ω–∞: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        file_extension = filename.lower().split('.')[-1] if '.' in filename else 'jpg'
        mime_type_map = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg', 
            'png': 'image/png',
            'gif': 'image/gif',
            'webp': 'image/webp'
        }
        mime_type = mime_type_map.get(file_extension, 'image/jpeg')
        print(f"üìé MIME —Ç–∏–ø: {mime_type}")
        
        print("üöÄ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –í CLAUDE API...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1500,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": mime_type,
                                "data": image_base64,
                            },
                        },
                        {
                            "type": "text",
                            "text": "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–∫–ª—é—á–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö, –ª—é–¥—è—Ö, —Ü–≤–µ—Ç–∞—Ö, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏ —Å—Ç–∏–ª–µ."
                        }
                    ],
                }
            ],
        )
        
        description = message.content[0].text
        print(f"‚úÖ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ CLAUDE! –î–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
        return description
        
    except Exception as e:
        error_msg = f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}"
        print(error_msg)
        return error_msg

@app.get("/", response_class=HTMLResponse)
async def upload_form(request: Request):
    return templates.TemplateResponse("upload.html", {"request": request})

@app.post("/upload", response_class=HTMLResponse) 
async def handle_upload(request: Request, file: UploadFile = File(...)):
    print(f"üìÅ –ü–û–õ–£–ß–ï–ù –§–ê–ô–õ: {file.filename}")
    
    contents = await file.read()
    image = Image.open(io.BytesIO(contents))
    width, height = image.size
    
    print(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width}x{height}")
    print(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(contents)} –±–∞–π—Ç")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Claude
    description = analyze_image_with_claude(contents, file.filename)
    
    return templates.TemplateResponse("upload.html", {
        "request": request,
        "filename": file.filename,
        "width": width,
        "height": height,
        "description": description,
    })
